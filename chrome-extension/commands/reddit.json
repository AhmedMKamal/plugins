
        'Collapse': (function() {
            return {
                regx: /^(?:collapse)$/,
                ordinalMatch: ["close", "close preview", "collapse"],
            };
        })(),
        'CommentsExpandAll': (function() {
            return {
                regx: /^(?:expand all)$/
            };
        })(),
        'Expand': (function() {
            // expand previews or comments
            var opened;
            return {
                regx: /^(?:preview|expand)$/,  // in comments view
                ordinalMatch: ["preview", "expand"]   // in subreddit view
            };
        })(),
        'HelpOpen': (function() {
            return {
                regx: /^(help|open help|help open|commands)$/
            };
        })(),
        'HelpClose': (function() {
            return {
                regx: /^(close help|help close|closeout|close up)$/,
                nice: 'close help'
            };
        })(),
        'NavigateBackward': (function() {
            return {
                regx: /^(?:back|go back)$/
            };
        })(),
        'NavigateForward': (function() {
            return {
                regx: /^(?:forward|ford|go forward)$/
            };
        })(),
        'NavigateToSubreddit': (function() {
            var REGX = /^(?:go to |show )?(?:are|our|r) (.*)/;
            console.log("BUILDING");
            return {
                matches: function(input) {
                    let match = input.match(REGX);
                    console.log(`navigate subreddit input: ${input} match: ${match}`);
                    if (match) {
                        return match[1].replace(/\s/g, "");
                    }
                },
                delay: 1200,
                nice: function(match) {
                    return `go to r/${match}`;
                }
            };
        })(),
        'TabClose': (function() {
            return {
                regx: /^(?:close tab|ghost up)$/,
                run: function() {
                    queryActiveTab(function(tab) {
                        chrome.tabs.remove(tab.id);
                    });
                },
                nice: 'close tab',
            };
        })(),
        'TabNew': (function() {
            return {
                regx: /^(?:new tab|open tab|newtown)$/,
                run: function() {
                    chrome.tabs.create({active: true});
                }
            };
        })(),
        'TabPrevious': (function() {
            return {
                regx: /^(?:previous tab)$/,
                run: function() {
                    chrome.tabs.query({currentWindow: true}, function(tabs) {
                        let curIndex;
                        let maxIndex = tabs.length - 1;
                        for (let tab of tabs) {
                            if (tab.active) {
                                curIndex = tab.index;
                                break;
                            }
                        }
                        console.log(`maxIndex: ${maxIndex} curIndex: ${curIndex}`);
                        for (let tab of tabs) {
                            if (tab.index === (curIndex <= 0 ? maxIndex : curIndex - 1)) {
                                chrome.tabs.update(tab.id, {active: true});
                                console.log(`found prev index! ${tab.index}`);
                                break;
                            }
                        }
                    });
                }
            };
        })(),
        'TabSelect': (function() {
            return {
                ordinalMatch: ['tab', 'time'],
                run: function(i) {
                    chrome.tabs.query({index: i - 1, currentWindow: true}, function(tabs) {
                        chrome.tabs.update(tabs[0].id, {active: true});
                    });
                }
            }
        })(),
        'TabNext': (function() {
            return {
                regx: /^(?:next tab|next time)$/,
                run: function() {
                    chrome.tabs.query({currentWindow: true}, function(tabs) {
                        let curIndex;
                        let maxIndex = tabs.length - 1;
                        for (let tab of tabs) {
                            if (tab.active) {
                                curIndex = tab.index;
                                break;
                            }
                        }
                        console.log(`maxIndex: ${maxIndex} curIndex: ${curIndex}`);
                        for (let tab of tabs) {
                            if (tab.index === (curIndex >= maxIndex ? 0 : curIndex + 1)) {
                                chrome.tabs.update(tab.id, {active: true});
                                console.log(`found next index! ${tab.index}`);
                                break;
                            }
                        }
                    });
                }
            };
        })(),
        'VoteClear': (function() {
            return {
                ordinalMatch: ['clear vote',],
                regx: /^(?:clear vote)$/,
            };
        })(),
        'VoteDown': (function() {
            return {
                ordinalMatch: ['downvote', 'download'],
                regx: /^(?:downvote|download)$/,
                nice: function(i) {
                    return `downvote ${i}`;
                },
            };
        })(),
        'VoteUp': (function() {
            return {
                ordinalMatch: ['upvote', 'upload', 'about', 'i thought'],
                regx: /^(?:upvote|upload|about|i thought|a phone)$/,
                nice: function(i) {
                    return `upvote ${i}`;
                },
            };
        })(),
        'VideoFullScreen': (function() {
            return {
                regx: /^(?:fullscreen|full screen)$/
            };
        })(),
        'VideoUnFullScreen': (function() {
            return {
                regx: /^(?:unfullscreen|unfull screen|on fullscreen|on full screen|unfor screen|unfold screen|no full screen)$/
            };
        })(),
        'VideoPause': (function() {
            return {
                regx: /^(pause|pause video)$/
            };
        })(),
        'VideoPlay': (function() {
            return {
                ordinalMatch: ['play']
            };
        })(),
        'VideoResume': (function() {
            // Works with any video that may have started, even with the mouse
            return {
                regx: /^(resume)$/
            };
        })(),
        'Reddit': (function() {
            return {
                regx: /^(home|reddit|reddit.com|read it)$/
            };
        })(),
        'Refresh': (function() {
            return {
                regx: /^refresh$/
            };
        })(),
        'ScrollBottom': (function() {
            return {
                regx: /^(bottom|bottom of page|bottom of the page|scroll bottom|scroll to bottom|scroll to the bottom of page|scroll to the bottom of the page)$/
            };
        })(),
        'ScrollTop': (function() {
            return {
                regx: /^(top|top of page|scrolltop|top of the page|scroll top|scroll to top|scroll to the top of page|scroll to the top of the page)$/
            };
        })(),
        'ScrollDownLittle': (function() {
            return {
                regx: /^(little down|little scroll down|scroll little down|down little)$/
            };
        })(),
        'ScrollDown': (function() {
            return {
                regx: [/^down$/, /^scroll down$/],
                delay: [300, 0],
            };
        })(),
        'ScrollUpLittle': (function() {
            return {
                regx: /^(little up|little scroll up|scroll little up|up little)$/
            };
        })(),
        'ScrollUp': (function() {
            return {
                regx: [/^up$/, /^scroll up$/],
                delay: [300, 0],
            };
        })(),
        'Stop': (function() {
            return {
                regx: /^stop$/
            };
        })(),
        'VisitPost': (function() {
            return {
                ordinalMatch: ['click'],
                regx: /^click$/,
                nice: function(i) {
                    let index = isNaN(+i) ? '' : i;
                    return `click ${index}`;
                }
            };
        })(),
        'ViewComments': (function() {
            return {
                ordinalMatch: ["comments", "view comments", "commons", "comets"]
            };
        })(),
    }